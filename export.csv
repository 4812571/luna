Into<Expression>>(left:,13
",1
less_than:,1
./src\ast\annotation\table.rs,1
"^",,1
File:,34
Option<String>,,2
},,1
text(&self),7
division,1
left,,15
std::io::{self,,1
std::path::Path;,1
walkdir::WalkDir;,1
.truncate(true),1
expression;,2
settings;,1
L,,16
new<T:,3
[`TypeAnnotation`].,5
crate::ast::TypeCombination;,1
&self.result,1
len(),1
false;,1
format(&self,,18
SourceItem;,1
content)?;,1
5;,1
`indexer`.,1
and:,1
&'static,6
self,10
SourceItem,,2
Box::new(annotation.into()),,1
intentionally,1
UnaryOperator,5
[`TypeArgument`],3
SourceFormatItem,,5
Into<TypeAnnotation>>(val:,1
singleton::TypeSingleton;,1
And,,1
result_parenthesized,1
TypeOperator,,3
val(&self),1
[`Optional`].,1
SourceItem::text(self.value().to_string()),3
Self::LessThan,3
},232
#[derive(Debug,,21
"#",,1
Self::new(BinaryOperator::LessThan,,1
.unwrap_or("".to_string());,1
object.description.separated;,1
_settings:,7
Self::Not,2
./src\lexer.rs,1
mut,4
output_file,1
divide:,1
"true",,1
IndentationMode,,1
Option<Box<TypeTableIndexer>>,,1
OpenOptions::new(),1
e.ok()),1
Self::Block(objects),2
Self::Function(a),1
indexer,4
&self.indexer,1
crate::ast::TypeArray;,1
NilLiteral;,1
Self::Power,4
new,52
TypeAnnotation,,5
`Table`.,2
Self::indentation(settings,,1
function::{TypeArgument,,1
~=,1
Vec<TypeTableEntry>,,2
annotation(&self),1
"boolean",,1
Self::Modulo,4
`BinaryOperator::LessThan`.,1
`TypeOperator::Union`.,1
literal;,2
GreaterThan,,1
annotation::*;,1
wrapping,1
Self::Optional(a),1
BinaryOperator,5
Hash,,3
Option<&String>,1
crate::ast::TypeAnnotation;,4
"/*,1
not,2
Self::Primitive(a),1
usize),2
`Table`,1
singleton;,2
source,1
.map(|entry|,1
TypeCombination,3
Literal,1
luna::ast::UnaryOperator;,1
EXPONENTIATION:,1
}}",,2
Length,,1
`BinaryOperator::Equal`.,1
Self::Boolean(bool),1
arguments,2
buffer.push_str(object.item.format(settings,,1
OperatorFormatSetting,2
RELATIONAL:,1
of,17
./src\ast\annotation\optional.rs,1
Precedence,3
./src\format\annotation\mod.rs,1
assert_eq!(BinaryOperator::equal().text(),,1
"^=",,1
result_parenthesized)),1
operator::{BinaryOperator,,1
Union,,1
#[derive(Clone,,1
[`TypeCombination`],1
./src\format\annotation\primitive.rs,1
new(item:,1
NumberLiteral,,2
TypeOperator,4
Table(TypeTable),,1
settings.annotations.function_return_parenthesis,1
4;,1
Precedence};,1
precedence::ADDITIVE,,2
SourceFormatSettings,1
"<");,1
&Vec<TypeAnnotation>,1
AsRef<str>>(value:,1
".repeat(spaces,1
"-=",,1
assert_eq!(BinaryOperator::add().text(),,1
&self.left,2
TypeArgument,4
new(),1
Power,,2
Operations,1
Self::new(BinaryOperator::NotEqual,,1
SourceFormatSettings,,9
SourceItem::Text(format!("{}?",,1
`TypePrimitive::Thread`.,1
./src\ast\mod.rs,1
entries.chain(std::iter::once(indexer)).join(",,1
entry.path();,1
String(String),,1
a.format(settings),,8
ParenthesisFormatSetting::Always,1
object,1
indent);,1
precedence::OR,,1
negate(),1
./src\ast\annotation\built_in.rs,1
AND:,1
FormatDescription,1
result,1
NumberLiteral(NumberLiteral),,1
UNARY:,1
Always,,1
[`TypeOperator`],2
Unknown,,1
pub,184
TypeOptional,3
Into<TypeAnnotation>>(annotation:,1
TypeArray,3
`BinaryOperator::Subtract`.,1
following,1
./src\precedence\mod.rs,1
not_equal<L:,1
.create(true),1
val.into(),,1
format!("{}{}",,1
From<bool>,1
modulo,1
addition,1
self.index();,1
entries.join(",,1
entries(&self),1
&text,,1
&self.index,2
Vec<TypeArgument>,,1
From)],2
GreaterThanOrEqual,,1
and(),1
String::from("0"),,1
(b,1
Self::new(BinaryOperator::And,,1
````,1
Self::NotEqual,3
value)),3
Equality,3
*/,34
result(&self),1
optional;,2
use,54
Self::Number,2
new(entries:,1
divide(),1
less_than<L:,1
indented:,1
this_separated;,1
OperatorFormatSettings,,1
R:,16
&self.val,1
=>,73
Box::new(left.into()),,2
argument.format_string(settings)),1
TypeTable,,1
`TypeTableEntry`,1
"/",,1
item)),1
ast;,1
modulo<L:,1
or<L:,1
{},4
writeln!(output_file,,2
8;,1
u8;,1
content,2
output_path);,1
u8,11
ADDITIVE:,1
Binary,1
pub(crate),1
```,3
built_in::TypeBuiltIn;,1
negate<T:,1
operand),3
Self::Spaces(4),1
^,1
%,1
not_equal(),1
str,6
last_separated,3
Ok(()),1
->,119
self.name.as_ref(),1
"nil",,1
new(index:,2
`TypeTableEntry`.,2
`BinaryOperator::NotEqual`.,1
Self::GreaterThan,3
"%=",,1
self.result().len(),1
Into<TypeAnnotation>>(,1
textual,3
function;,2
settings.indentation,1
Some(name),1
Self::new(BinaryOperator::LessThanOrEqual,,1
String::new(),,1
"\t".repeat(tabs,1
./src\format\settings.rs,1
if,2
.result(),1
./src\lib.rs,1
Add,,2
index,4
Box<TypeAnnotation>,,3
add(),1
`BinaryOperator::GreaterThan`.,1
Into<Expression>>(operand:,3
SourceItem::text(self.text()),3
=,37
SourceItem::Text(argument),1
&TypeAnnotation,7
//,25
with,27
"~=",,1
subtraction,1
Self::Singleton(a),1
arguments(&self),1
Self::Text(text),1
self.format(settings).format(settings,,1
`BinaryOperator::GreaterThanOrEqual`.,1
to,1
Equal,,1
||,1
const,9
Copy,,4
./src\format\annotation\table.rs,1
parenthesis:,2
./src\main.rs,1
[`TypeAnnotation`],4
NilLiteral,1
`BinaryOperator::Power`.,1
self.annotation().format_string(settings);,1
&SourceFormatSettings,,2
buffer,2
"{}\n",,1
>=,1
Constructs,49
[`UnaryOperator`],2
`UnaryOperator::Negate`.,1
itertools::Itertools;,2
Box::new(operand.into()),,1
Necessary,,1
7;,1
thread(),1
Self::Combination(a),1
&Vec<TypeTableEntry>,1
TypeTableIndexer};,1
Self::Necessary,1
entries:,1
self.value,1
bool),1
userdata(),1
AsRef<str>>,2
ParenthesisFormatSetting::default(),,1
precedence::RELATIONAL,,4
precedence(&self),3
multiply<L:,1
where,1
index(&self),2
nil(),1
or,4
Identifier,1
"and");,1
for,31
UnaryOperation(UnaryOperation),,1
./src\ast\annotation\singleton.rs,1
table::{TypeArray,,1
Self::Union,2
UnaryOperator,,2
">=",,1
.as_ref(),1
index:,2
right,19
`TypeTableIndexer`.,2
value.as_ref().to_string(),,2
Block(Vec<SourceObject>),,1
SourceItem,18
indexer:,2
from(value:,3
/*,34
anonymous<T:,1
[`TypeCombination`].,3
`BinaryOperator::LessThanOrEqual`.,1
`TypePrimitive::Number`.,1
impl<T:,2
or(),1
UnaryOperation};,1
`TypePrimitive::Nil`.,1
TypeTable,3
`TypePrimitive::Boolean`.,1
Negate,,1
Self::new(BinaryOperator::Equal,,1
than,4
.iter(),3
in,3
TypeBuiltIn,3
Number,,1
Modulo,,2
power(),1
format!("({})",,1
Expression,1
format,3
Returns,20
value(&self),5
Self,76
Self::Intersection,2
Into<Expression>>(,2
Self::new(BinaryOperator::Multiply,,1
Self::String,2
`BinaryOperator::And`.,1
&Vec<TypeArgument>,1
item:,2
`BinaryOperator::Divide`.,1
"+");,1
Literals,1
[`Expression`],3
&self.operand,1
BinaryOperation,3
Self::new(BinaryOperator::Modulo,,1
Self::new(BinaryOperator::Or,,1
./src\ast\annotation\mod.rs,1
TypeFunction,3
");,2
self.index().format_string(settings);,1
SourceItem::Text(format!("{}:,1
entries,2
./src\ast\statement\mod.rs,1
(c,1
&self.arguments,1
"thread",,1
./src\format\expression\literal.rs,1
"==");,1
self.indexer().as_ref().map(|a|,1
given,27
(number),1
(),1
SourceItem::text("nil"),1
NilLiteral(NilLiteral),,1
crate::ast::expression::literal::{BooleanLiteral,,1
"<",,1
"string",,1
SourceItem::Text(format!("({}),1
text),1
body),1
negation,1
Into<Expression>>(operator:,1
operator:,5
TypeTableEntry,,1
Option<Box<TypeTableIndexer>>),1
&self.entries,1
and,32
crate::ast::TypeTableEntry;,1
T,1
annotations:,1
Default)],3
divide<L:,1
{,238
output_path,1
greater_than<L:,1
.map(|a|,1
name,3
Not,,1
union(),1
SourceItem::Text(format!("[{}]:,1
.entries(),1
./src\format\annotation\optional.rs,1
./src\format\annotation\built_in.rs,1
OperatorFormatSettings,1
left,19
Into<TypeAnnotation>>(name:,2
&self,4
`BinaryOperator::Multiply`.,1
enum,12
mod,29
val),2
self.left().format_string(settings);,1
"%",,1
b,1
crate::ast::TypeTableIndexer;,1
Vec<SourceObject>),1
body,1
0),1
not_equal:,1
Self::Length,2
Self::new(UnaryOperator::Negate,,1
assert_eq!(BinaryOperator::and().text(),,1
TypeAnnotation),2
Self::Text(value.as_ref().to_string()),1
self.value().format_string(settings);,2
indentation(settings:,1
FormatDescription,,1
Optional(TypeOptional),,1
false,2
crate::ast::{TypeAnnotation,,1
c,1
./src\format\annotation\singleton.rs,1
operation;,1
SourceFormatItem,17
impl<T>,1
T:,1
Subtract,,2
Self::new(BinaryOperator::Divide,,1
b),1
indentation,1
Combination(TypeCombination),,1
./src\ast\expression\literal.rs,1
operation::{BinaryOperation,,1
not(),1
operand:,3
less_than_or_equal<L:,1
spacing:,2
./src\ast\annotation\combination.rs,1
"unknown",,1
or:,1
less_than_or_equal:,1
std::fs::{self,,1
.write(true),1
path,1
NilLiteral,,2
Option<Box<TypeAnnotation>>),1
1;,1
<,1
OR:,1
fn,117
greater_than(),1
Math,3
SourceItem};,8
"not");,1
Self::new(BinaryOperator::GreaterThan,,1
crate::ast::TypeFunction;,1
.open(output_path)?;,1
Self::new(UnaryOperator::Not,,1
MULTIPLICATIVE:,1
multiply(),1
"),,2
String,,6
IndentationMode,2
name(&self),1
right)),1
6;,1
ParenthesisFormatSetting::Necessary,1
"false",,1
settings::*;,1
Array(TypeArray),,1
main(),1
Debug,,1
Self::LessThanOrEqual,3
From<T>,2
[`UnaryOperation`],4
impl,51
None,2
indent,1
power<L:,1
./src\precedence\operator.rs,1
crate::precedence::{self,,1
};,6
!=,1
StringLiteral(StringLiteral),,1
self.val().format_string(settings);,1
Nil,,1
new<L:,2
"<=",,1
description:,1
String;,1
Into<Expression>,,15
Divide,,2
right:,20
luna::ast::BinaryOperator;,1
AnnotationFormatSettings,1
name:,1
settings:,13
crate::ast::TypeTable;,1
BinaryOperation(BinaryOperation),,1
entries,,1
`value`.,2
operator.,3
./src\ast\annotation\function.rs,1
EQUALITY:,1
None,,1
self.right().format_string(settings);,1
crate::ast::{BinaryOperator,,2
[`BinaryOperation`].,3
statement;,1
`TypePrimitive::String`.,1
power,1
construct::*;,1
IndentationMode::None,1
objects,1
less_than(),1
crate::format::{SourceFormatItem,,5
`BinaryOperator::Modulo`.,1
&Option<Box<TypeTableIndexer>>,1
primitive::TypePrimitive;,1
./src\ast\expression\operation.rs,1
expression::*;,1
./src\format\annotation\combination.rs,1
./src\format\annotation\function.rs,1
.map(|result|,1
greater_than_or_equal(),1
format_string(&self,,2
Self::BuiltIn(a),1
multiply:,1
"#");,1
Or,,1
TypeAnnotation,2
SourceFormat,,1
println!("Exported,1
string(),1
Box<Expression>,,3
&self.value,4
"+=",,1
"/=",,1
R),13
result.format_string(settings)),1
==,1
TypeSingleton,3
Clone,,21
this,18
text<T:,1
name,,2
trait,3
"==",,1
val:,4
Thread,,1
*,3
Self::Divide,4
Function(TypeFunction),,1
a.format_string(settings));,1
io::Result<()>,1
crate::format::{,1
&self.annotation,1
>,1
result),,2
d,2
&self.right,2
left:,7
annotation:,2
table;,2
`TypeTableIndexer`,1
PartialEq,,11
&self.item,1
Self::Multiply,4
[`BinaryOperator`],2
Index,1
[`Optional`],1
indexer(&self),1
modulo(),1
is,1
./src\ast\construct\mod.rs,1
add:,1
precedence;,1
Default,4
"any",,1
Comparisons,3
NumberLiteral,5
.map(|argument|,1
Eq,,9
`TypeOperator::Intersection`.,1
a.format_string(settings)),1
Self::Thread,2
item(&self),1
ParenthesisFormatSetting,2
literal::{BooleanLiteral,,1
named<T:,1
Option<Box<TypeAnnotation>>,,1
./src\ast\statement\compound_assign.rs,1
Into<TypeAnnotation>,,1
2;,1
greater_than_or_equal<L:,1
BuiltIn(TypeBuiltIn),,1
+,2
AnnotationFormatSettings,,1
Hash)],6
PartialEq)],11
SourceItem::Text(format!("{{,2
greater_than_or_equal:,1
"and",,1
fs::read_to_string(&path)?;,1
Self::new(BinaryOperator::Subtract,,1
construct;,1
"-",,2
Tabs(usize),,1
crate::ast::TypeArgument;,1
index,,4
optional::TypeOptional;,1
"-");,1
Self::GreaterThanOrEqual,3
less_than_or_equal(),1
length,1
and<L:,1
Some(indexer),1
greater,2
Self::Subtract,4
<=,1
operator;,2
Self::Boolean,2
equal:,1
[`TypeArgument`].,2
LessThanOrEqual,,1
the,51
Self::Userdata,2
&SourceFormatSettings),19
Write};,1
"export.txt";,1
WalkDir::new("./src").into_iter().filter_map(|e|,1
Self::new(Some(name),,1
StringLiteral};,2
TypeOperator};,1
arguments:,1
value),,2
block(objects:,1
Self::Table(a),1
indent:,2
indentation,,1
File,,1
UnaryOperation,3
0;,1
Never,,1
value:,10
intersection(),1
indentation:,1
self.operator,3
`BinaryOperator::Add`.,1
StringLiteral,4
Consider,1
Spaces(usize),,1
default(),4
{}",,6
#[derive(Default)],3
&Option<Box<TypeAnnotation>>,1
Box::new(right.into()),,2
Expression,,1
TypePrimitive,4
SourceItem::Text(format!("{},1
.join(",,2
crate::ast::TypePrimitive;,1
format!("{}",,3
OpenOptions};,1
operator,,4
BinaryOperator,,2
path.display())?;,1
String::new();,1
"number",,1
entry,1
"*=",,1
equal,4
assert_eq!(UnaryOperator::negate().text(),,1
R,,3
TypeFunction};,1
Multiply,,2
SourceObject,1
Text(String),,1
"not",,1
Any,,1
separated:,1
greater_than:,1
3;,1
left(&self),2
CompoundAssignmentOperator,2
Self::String(text),1
Construct,3
function_return_parenthesis:,1
self.name(),1
precedence::EXPONENTIATION,,1
),3
TypeTableEntry,3
`UnaryOperator::Not`.,1
./src\ast\annotation\primitive.rs,1
subtract(),1
equal(),1
annotation;,2
Logical,3
Self::And,3
zero,1
1,,1
((a,1
crate::ast::TypeSingleton;,1
bool,2
UnaryOperator};,3
right(&self),2
.arguments(),1
`BinaryOperator::Or`.,1
struct,20
IndentationMode::Tabs(tabs),1
OperatorFormatSetting,,12
Self::Array(a),1
assert_eq!(UnaryOperator::len().text(),,1
crate::format::{SourceFormat,,3
precedence::MULTIPLICATIVE,,3
multiplication,1
Self::Nil,2
Call,1
-,1
operator(&self),3
VERBATIM:,1
content)),1
buffer.push_str("\n");,1
"or",,1
"*",,1
derive_more::From;,2
Self::Equal,3
1).as_str());,1
Unary,1
format;,1
precedence::AND,,1
Primitive(TypePrimitive),,1
value,9
anonymous,1
BooleanLiteral(BooleanLiteral),,1
[`UnaryOperation`].,2
operators:,1
path.is_file(),1
BooleanLiteral,4
String,3
&str,4
./src\format\expression\mod.rs,1
a,56
Self::new(BinaryOperator::GreaterThanOrEqual,,1
assert_eq!(UnaryOperator::not().text(),,1
precedence::UNARY,1
item,2
IndentationMode::Spaces(spaces),1
SourceFormat,2
combination::TypeCombination;,1
&Expression,3
Self::Or,3
Self::Add,4
equal<L:,1
Self::Unknown,1
Self::new(UnaryOperator::Length,,1
"userdata",,1
Boolean,,1
[`BinaryOperation`],15
">",,1
assert_eq!(BinaryOperator::less_than().text(),,1
less,2
Self::new(BinaryOperator::Add,,1
statement::*;,1
primitive;,2
built_in;,2
crate::ast::TypeBuiltIn;,1
self.operator().text();,1
ParenthesisFormatSetting,,3
argument,1
subtract<L:,1
result_has_parenthesis,2
not<T:,1
parenthesis.,1
right),14
format!("{}:,1
`entries`,1
d)),1
./src\ast\expression\mod.rs,1
indent),,2
precedence::EQUALITY,,2
NotEqual,,1
match,16
c),1
entry.format_string(settings));,1
"|",,1
Intersection,,1
boolean(),1
operand(&self),1
`index`,2
"+",,1
example:,1
crate::ast::TypeOptional;,1
Vec<TypeAnnotation>,,1
true,2
true,,2
"never",,1
*/",,1
Self::Any,1
T),11
LessThan,,1
operator,1
subtract:,1
result:,1
TypeTableIndexer,3
/,4
Boolean(bool),,1
let,27
///,87
arguments,,1
Self::new(BinaryOperator::Power,,1
./src\format\mod.rs,1
Self::Never,1
Note:,1
named,1
"&",,1
bool,,4
[`Expression`].,19
Singleton(TypeSingleton),,1
./src\ast\construct\operator.rs,1
Self::Negate,2
`UnaryOperator::Len`.,1
add<L:,1
.item(),1
this_separated,2
combination;,2
`TypePrimitive::Userdata`.,1
Userdata,,1
Self::new(None,,1
length<T:,1
